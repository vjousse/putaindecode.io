{"head":{"layout":"Post","comments":true,"date":"2015-11-24","title":"Tester unitairement des composants React","tags":["js","react","tests"],"authors":["MoOx"],"header":{"image":"https://farm6.staticflickr.com/5159/7112879347_9e0da289ca_z.jpg","credit":"https://www.flickr.com/photos/dvids/7112879347","linearGradient":"160deg, rgba(0,0,0, .9), rgba(97, 218, 251, .7)"},"description":"L'√©quipe de React a impl√©ment√© une fonctionnalit√© appel√©e\nshallow rendering\n(rendu peu profond),\nqui permet de rendre un composant avec un‚Ä¶"},"body":"<p>L&#x27;√©quipe de React a impl√©ment√© une fonctionnalit√© appel√©e\n<a href=\"http://facebook.github.io/react/docs/test-utils.html#shallow-rendering\">shallow rendering</a>\n(rendu peu profond),\nqui permet de rendre un composant avec un seul niveau de profondeur de rendu.</p>\n<p>Cela permet du coup de v√©rifier ce que le rendu retourne sans avoir √† se\nsoucier du comportement des composants enfants, qui ne sont pas instanci√©s ni\nrendus. Cela ne n√©cessite pas de DOM.</p>\n<p>Int√©ressant, n&#x27;est-ce pas ? Et d&#x27;ailleurs, le <em>shallow rendering</em> est\nactuellement\n<a href=\"https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26\">la m√©thode recommand√©e pour tester vos composants React</a>.</p>\n<p>Comme vous pourrez le voir dans un article list√© √† la fin de celui-ci,\nle code permettant de tester des composants avec cette technique n&#x27;est pas\nforc√©ment tr√®s concis, contrairement √† ce qu&#x27;on pourrait attendre.</p>\n<p>Heureusement, <a href=\"https://github.com/vvo\">quelqu&#x27;un</a> a cod√© un truc plut√¥t cool :\n<a href=\"https://github.com/algolia/react-element-to-jsx-string\">react-element-to-jsx-string</a>.\nComme le nom l&#x27;indique, cette librairie permet de rendre un composant React en\ntant que cha√Æne JSX.</p>\n<p>C&#x27;est maintenant les choses deviennent int√©ressantes¬†:\navec ces concepts en t√™te (le shallow render et le rendu de composant en strings\nJSX), on peut facilement ajouter de simple tests unitaires sur ses composants.</p>\n<p><em>Il y a d&#x27;autres techniques pour tester des composants React, et la plupart\nimplique le DOM. Vous devrez donc √©xecuter vos tests dans un navigateur (ou\nen utilisant jsdom)¬†: vos tests seront plus lents que la technique qui va suivre\n(qui pour le coup est plus du vrai test unitaire, dans le sens o√π vous utilisez\nmoins de code et ne n√©cessitez pas un gros environnement).</em></p>\n<h2 id=\"tester-facilement-des-composants-react-sans-dom\"><a href=\"#tester-facilement-des-composants-react-sans-dom\" class=\"phenomic-HeadingAnchor\">#</a>Tester facilement des composants React (sans DOM)</h2>\n<p>On va partir avec ce simple composant¬†:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { PropTypes } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n\n<span class=\"hljs-keyword\">const</span> Component = ({\n  img,\n  title,\n  Loader,\n  Title,\n}) =&gt; (\n  &lt;div&gt;\n    {\n      (!img || !img.src) &amp;&amp; Loader &amp;&amp;\n      &lt;Loader /&gt;\n    }\n    {\n      img &amp;&amp; img.src &amp;&amp;\n      &lt;img src={ img.src } alt={ img.alt }/&gt;\n    }\n    {\n      title &amp;&amp; Title &amp;&amp;\n      &lt;Title text={ title } /&gt;\n    }\n  &lt;/div&gt;\n)\n\nComponent.propTypes = {\n  img: PropTypes.object,\n  title: PropTypes.string,\n  Loader: PropTypes.func.isRequired,\n  Title: PropTypes.func.isRequired,\n}\n\nComponent.displayName = \"Picture\"\n\nexport default Component</code></pre>\n<p>Ce composant affiche une image avec un composant pour le titre.\nSi les donn√©es de l&#x27;image ne sont pas pr√™tes, on peut afficher un composant pour\nindiquer le chargement.</p>\n<p>√âcrivons maintenant un petit test. Pour notre exemple, on va utiliser\n<a href=\"https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4\">tape</a>\ncoupl√© avec <a href=\"https://github.com/atabel/tape-jsx-equals\">tape-jsx-equals</a>,\nmais vous n&#x27;aurez pas de mal √† trouver un paquet √†\n<a href=\"https://www.npmjs.com/search?q=expect+jsx\">votre sauce sur npm</a>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// web_modules/Picture/__tests__/index.js</span>\n\n<span class=\"hljs-keyword\">import</span> tape <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"tape\"</span>\n<span class=\"hljs-keyword\">import</span> addAssertions <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"extend-tape\"</span>\n<span class=\"hljs-keyword\">import</span> jsxEquals <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"tape-jsx-equals\"</span>\n<span class=\"hljs-keyword\">const</span> test = addAssertions(tape, { jsxEquals })\n\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { createRenderer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react-addons-test-utils\"</span>\n\n<span class=\"hljs-keyword\">import</span> Picture <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"..\"</span>\n\n<span class=\"hljs-comment\">// fixtures (empty and stateless react components)</span>\n<span class=\"hljs-keyword\">const</span> Loader = () =&gt; {}\n<span class=\"hljs-keyword\">const</span> Title = () =&gt; {}\n\ntest(<span class=\"hljs-string\">\"PageContainer is properly rendered\"</span>, (t) =&gt; {\n  <span class=\"hljs-keyword\">const</span> renderer = createRenderer()\n\n  renderer.render(\n    &lt;Picture\n      Loader={ Loader }\n      Title={ Title }\n    /&gt;\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    &lt;div&gt;\n      &lt;Loader /&gt;\n    &lt;/div&gt;,\n    \"can render a Loader component if no image data are passed\"\n  )\n\n  renderer.render(\n    &lt;Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n    /&gt;\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    &lt;div&gt;\n      &lt;img src=\"SRC\" alt=\"ALT\" /&gt;\n    &lt;/div&gt;,\n    \"should render an image if data are passed\"\n  )\n\n  renderer.render(\n    &lt;Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n      title={ \"TITLE\" }\n    /&gt;\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    &lt;div&gt;\n      &lt;img src=\"SRC\" alt=\"ALT\" /&gt;\n      &lt;Title text=\"TITLE\" /&gt;\n    &lt;/div&gt;,\n    \"can render a Title if data are passed\"\n  )\n\n  t.end()\n})</code></pre>\n<p>Ces tests sont une couverture minimale pour vous assurer que vous ne cassez rien\nlorsque vous travaillez sur votre composant.</p>\n<p>Comme vous pouvez le constater, les tests sont assez simples √† √©crire et vont\ndroit au but.\n<strong>Ce qui est int√©ressant ici, c&#x27;est que nous ne comparons pas √† l&#x27;aide de\nsimples cha√Ænes. Nous utilisons directement des composants React.</strong></p>\n<p>Vous pouvez tranquillement ex√©cuter l&#x27;exemple complet et le r√©cup√©rer depuis le\nrepository¬†:</p>\n<p><a href=\"https://github.com/MoOx/react-component-unit-testing-example\">github.com/MoOx/react-component-unit-testing-example</a></p>\n<p>Cet exemple contient les commandes et d√©pendances\n(d√©finies dans le <code>package.json</code>)\ndont vous aurez besoin.</p>\n<h1 id=\"et-comment-tester-les-vnements-comme-onclick-\"><a href=\"#et-comment-tester-les-vnements-comme-onclick-\" class=\"phenomic-HeadingAnchor\">#</a>Et comment tester les √©v√®nements comme <code>onClick</code> ?</h1>\n<p>Vous n&#x27;avez pas √† reproduire le clic compl√®tement.</p>\n<p><strong>Vos tests n&#x27;ont pas besoin de v√©rifier que la prop <code>onClick</code> va bien √™tre\nex√©cut√©e lorsque vous cliquerez sur un √©l√©ment du DOM.</strong>\n<em>React couvre probablement cela dans sa suite de tests.</em></p>\n<p>Ce que vous avez besoin de tester, c&#x27;est que la valeur que vous passez au\n<code>onClick</code> fait bien ce que vous voulez.\nEn gros, si vous avez un bout de code qui ressemble √†\n<code>onClick={ yourCallback }</code>, vous n&#x27;avez tout simplement qu&#x27;√† appeler directement\n<code>yourCallback()</code> dans vos tests juste avant votre comparaison.\nC&#x27;est bien assez !</p>\n<p>Si vous voulez aller un peu plus loin, vous pouvez continuer par lire¬†:</p>\n<ul>\n<li><a href=\"http://simonsmith.io/unit-testing-react-components-without-a-dom/\"><em>Unit testing React components without a DOM</em></a>,\npar Simon Smith, qui couvre le m√™me sujet, sans la simplicit√© de la comparaison\nJSX,</li>\n<li><a href=\"https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/\"><em>How we unit test React components using expect-jsx</em></a>\nsur le blog d&#x27;Algolia, qui explique pourquoi ils ont choisi et cr√©√© les outils\npour cette approche.</li>\n</ul>\n<p>Avec ces exemples, nous esp√©rons vraiment que vous n&#x27;aurez plus peur de tester\nvotre code et que vous n&#x27;h√©siterez plus √† couvrir tous vos composants React de\ntests üòç.</p>\n","rawBody":"\nL'√©quipe de React a impl√©ment√© une fonctionnalit√© appel√©e\n[shallow rendering](http://facebook.github.io/react/docs/test-utils.html#shallow-rendering)\n(rendu peu profond),\nqui permet de rendre un composant avec un seul niveau de profondeur de rendu.\n\nCela permet du coup de v√©rifier ce que le rendu retourne sans avoir √† se\nsoucier du comportement des composants enfants, qui ne sont pas instanci√©s ni\nrendus. Cela ne n√©cessite pas de DOM.\n\nInt√©ressant, n'est-ce pas ? Et d'ailleurs, le _shallow rendering_ est\nactuellement\n[la m√©thode recommand√©e pour tester vos composants React](https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26).\n\nComme vous pourrez le voir dans un article list√© √† la fin de celui-ci,\nle code permettant de tester des composants avec cette technique n'est pas\nforc√©ment tr√®s concis, contrairement √† ce qu'on pourrait attendre.\n\nHeureusement, [quelqu'un](https://github.com/vvo) a cod√© un truc plut√¥t cool :\n[react-element-to-jsx-string](https://github.com/algolia/react-element-to-jsx-string).\nComme le nom l'indique, cette librairie permet de rendre un composant React en\ntant que cha√Æne JSX.\n\nC'est maintenant les choses deviennent int√©ressantes¬†:\navec ces concepts en t√™te (le shallow render et le rendu de composant en strings\nJSX), on peut facilement ajouter de simple tests unitaires sur ses composants.\n\n_Il y a d'autres techniques pour tester des composants React, et la plupart\nimplique le DOM. Vous devrez donc √©xecuter vos tests dans un navigateur (ou\nen utilisant jsdom)¬†: vos tests seront plus lents que la technique qui va suivre\n(qui pour le coup est plus du vrai test unitaire, dans le sens o√π vous utilisez\nmoins de code et ne n√©cessitez pas un gros environnement)._\n\n## Tester facilement des composants React (sans DOM)\n\nOn va partir avec ce simple composant¬†:\n\n```js\n// web_modules/Picture/index.js\n\nimport React from \"react\"\nimport { PropTypes } from \"react\"\n\nconst Component = ({\n  img,\n  title,\n  Loader,\n  Title,\n}) => (\n  <div>\n    {\n      (!img || !img.src) && Loader &&\n      <Loader />\n    }\n    {\n      img && img.src &&\n      <img src={ img.src } alt={ img.alt }/>\n    }\n    {\n      title && Title &&\n      <Title text={ title } />\n    }\n  </div>\n)\n\nComponent.propTypes = {\n  img: PropTypes.object,\n  title: PropTypes.string,\n  Loader: PropTypes.func.isRequired,\n  Title: PropTypes.func.isRequired,\n}\n\nComponent.displayName = \"Picture\"\n\nexport default Component\n```\n\nCe composant affiche une image avec un composant pour le titre.\nSi les donn√©es de l'image ne sont pas pr√™tes, on peut afficher un composant pour\nindiquer le chargement.\n\n√âcrivons maintenant un petit test. Pour notre exemple, on va utiliser\n[tape](https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4)\ncoupl√© avec [tape-jsx-equals](https://github.com/atabel/tape-jsx-equals),\nmais vous n'aurez pas de mal √† trouver un paquet √†\n[votre sauce sur npm](https://www.npmjs.com/search?q=expect+jsx).\n\n```js\n// web_modules/Picture/__tests__/index.js\n\nimport tape from \"tape\"\nimport addAssertions from \"extend-tape\"\nimport jsxEquals from \"tape-jsx-equals\"\nconst test = addAssertions(tape, { jsxEquals })\n\nimport React from \"react\"\nimport { createRenderer } from \"react-addons-test-utils\"\n\nimport Picture from \"..\"\n\n// fixtures (empty and stateless react components)\nconst Loader = () => {}\nconst Title = () => {}\n\ntest(\"PageContainer is properly rendered\", (t) => {\n  const renderer = createRenderer()\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <Loader />\n    </div>,\n    \"can render a Loader component if no image data are passed\"\n  )\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n    </div>,\n    \"should render an image if data are passed\"\n  )\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n      title={ \"TITLE\" }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n      <Title text=\"TITLE\" />\n    </div>,\n    \"can render a Title if data are passed\"\n  )\n\n  t.end()\n})\n```\n\nCes tests sont une couverture minimale pour vous assurer que vous ne cassez rien\nlorsque vous travaillez sur votre composant.\n\nComme vous pouvez le constater, les tests sont assez simples √† √©crire et vont\ndroit au but.\n**Ce qui est int√©ressant ici, c'est que nous ne comparons pas √† l'aide de\nsimples cha√Ænes. Nous utilisons directement des composants React.**\n\nVous pouvez tranquillement ex√©cuter l'exemple complet et le r√©cup√©rer depuis le\nrepository¬†:\n\n[github.com/MoOx/react-component-unit-testing-example](https://github.com/MoOx/react-component-unit-testing-example)\n\nCet exemple contient les commandes et d√©pendances\n(d√©finies dans le `package.json`)\ndont vous aurez besoin.\n\n# Et comment tester les √©v√®nements comme `onClick` ?\n\nVous n'avez pas √† reproduire le clic compl√®tement.\n\n**Vos tests n'ont pas besoin de v√©rifier que la prop `onClick` va bien √™tre\nex√©cut√©e lorsque vous cliquerez sur un √©l√©ment du DOM.**\n_React couvre probablement cela dans sa suite de tests._\n\nCe que vous avez besoin de tester, c'est que la valeur que vous passez au\n`onClick` fait bien ce que vous voulez.\nEn gros, si vous avez un bout de code qui ressemble √†\n`onClick={ yourCallback }`, vous n'avez tout simplement qu'√† appeler directement\n`yourCallback()` dans vos tests juste avant votre comparaison.\nC'est bien assez !\n\nSi vous voulez aller un peu plus loin, vous pouvez continuer par lire¬†:\n- [_Unit testing React components without a DOM_](http://simonsmith.io/unit-testing-react-components-without-a-dom/),\npar Simon Smith, qui couvre le m√™me sujet, sans la simplicit√© de la comparaison\nJSX,\n- [_How we unit test React components using expect-jsx_](https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/)\nsur le blog d'Algolia, qui explique pourquoi ils ont choisi et cr√©√© les outils\npour cette approche.\n\nAvec ces exemples, nous esp√©rons vraiment que vous n'aurez plus peur de tester\nvotre code et que vous n'h√©siterez plus √† couvrir tous vos composants React de\ntests üòç.\n","raw":"---\ndate: \"2015-11-24\"\ntitle: Tester unitairement des composants React\ntags:\n  - js\n  - react\n  - tests\nauthors:\n  - MoOx\nheader:\n  image: https://farm6.staticflickr.com/5159/7112879347_9e0da289ca_z.jpg\n  credit: https://www.flickr.com/photos/dvids/7112879347\n  linearGradient: 160deg, rgba(0,0,0, .9), rgba(97, 218, 251, .7)\n---\n\nL'√©quipe de React a impl√©ment√© une fonctionnalit√© appel√©e\n[shallow rendering](http://facebook.github.io/react/docs/test-utils.html#shallow-rendering)\n(rendu peu profond),\nqui permet de rendre un composant avec un seul niveau de profondeur de rendu.\n\nCela permet du coup de v√©rifier ce que le rendu retourne sans avoir √† se\nsoucier du comportement des composants enfants, qui ne sont pas instanci√©s ni\nrendus. Cela ne n√©cessite pas de DOM.\n\nInt√©ressant, n'est-ce pas ? Et d'ailleurs, le _shallow rendering_ est\nactuellement\n[la m√©thode recommand√©e pour tester vos composants React](https://discuss.reactjs.org/t/whats-the-prefered-way-to-test-react-js-components/26).\n\nComme vous pourrez le voir dans un article list√© √† la fin de celui-ci,\nle code permettant de tester des composants avec cette technique n'est pas\nforc√©ment tr√®s concis, contrairement √† ce qu'on pourrait attendre.\n\nHeureusement, [quelqu'un](https://github.com/vvo) a cod√© un truc plut√¥t cool :\n[react-element-to-jsx-string](https://github.com/algolia/react-element-to-jsx-string).\nComme le nom l'indique, cette librairie permet de rendre un composant React en\ntant que cha√Æne JSX.\n\nC'est maintenant les choses deviennent int√©ressantes¬†:\navec ces concepts en t√™te (le shallow render et le rendu de composant en strings\nJSX), on peut facilement ajouter de simple tests unitaires sur ses composants.\n\n_Il y a d'autres techniques pour tester des composants React, et la plupart\nimplique le DOM. Vous devrez donc √©xecuter vos tests dans un navigateur (ou\nen utilisant jsdom)¬†: vos tests seront plus lents que la technique qui va suivre\n(qui pour le coup est plus du vrai test unitaire, dans le sens o√π vous utilisez\nmoins de code et ne n√©cessitez pas un gros environnement)._\n\n## Tester facilement des composants React (sans DOM)\n\nOn va partir avec ce simple composant¬†:\n\n```js\n// web_modules/Picture/index.js\n\nimport React from \"react\"\nimport { PropTypes } from \"react\"\n\nconst Component = ({\n  img,\n  title,\n  Loader,\n  Title,\n}) => (\n  <div>\n    {\n      (!img || !img.src) && Loader &&\n      <Loader />\n    }\n    {\n      img && img.src &&\n      <img src={ img.src } alt={ img.alt }/>\n    }\n    {\n      title && Title &&\n      <Title text={ title } />\n    }\n  </div>\n)\n\nComponent.propTypes = {\n  img: PropTypes.object,\n  title: PropTypes.string,\n  Loader: PropTypes.func.isRequired,\n  Title: PropTypes.func.isRequired,\n}\n\nComponent.displayName = \"Picture\"\n\nexport default Component\n```\n\nCe composant affiche une image avec un composant pour le titre.\nSi les donn√©es de l'image ne sont pas pr√™tes, on peut afficher un composant pour\nindiquer le chargement.\n\n√âcrivons maintenant un petit test. Pour notre exemple, on va utiliser\n[tape](https://medium.com/javascript-scene/why-i-use-tape-instead-of-mocha-so-should-you-6aa105d8eaf4)\ncoupl√© avec [tape-jsx-equals](https://github.com/atabel/tape-jsx-equals),\nmais vous n'aurez pas de mal √† trouver un paquet √†\n[votre sauce sur npm](https://www.npmjs.com/search?q=expect+jsx).\n\n```js\n// web_modules/Picture/__tests__/index.js\n\nimport tape from \"tape\"\nimport addAssertions from \"extend-tape\"\nimport jsxEquals from \"tape-jsx-equals\"\nconst test = addAssertions(tape, { jsxEquals })\n\nimport React from \"react\"\nimport { createRenderer } from \"react-addons-test-utils\"\n\nimport Picture from \"..\"\n\n// fixtures (empty and stateless react components)\nconst Loader = () => {}\nconst Title = () => {}\n\ntest(\"PageContainer is properly rendered\", (t) => {\n  const renderer = createRenderer()\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <Loader />\n    </div>,\n    \"can render a Loader component if no image data are passed\"\n  )\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n    </div>,\n    \"should render an image if data are passed\"\n  )\n\n  renderer.render(\n    <Picture\n      Loader={ Loader }\n      Title={ Title }\n      img={ {\n        src: \"SRC\",\n        alt: \"ALT\",\n      } }\n      title={ \"TITLE\" }\n    />\n  )\n  t.jsxEquals(\n    renderer.getRenderOutput(),\n    <div>\n      <img src=\"SRC\" alt=\"ALT\" />\n      <Title text=\"TITLE\" />\n    </div>,\n    \"can render a Title if data are passed\"\n  )\n\n  t.end()\n})\n```\n\nCes tests sont une couverture minimale pour vous assurer que vous ne cassez rien\nlorsque vous travaillez sur votre composant.\n\nComme vous pouvez le constater, les tests sont assez simples √† √©crire et vont\ndroit au but.\n**Ce qui est int√©ressant ici, c'est que nous ne comparons pas √† l'aide de\nsimples cha√Ænes. Nous utilisons directement des composants React.**\n\nVous pouvez tranquillement ex√©cuter l'exemple complet et le r√©cup√©rer depuis le\nrepository¬†:\n\n[github.com/MoOx/react-component-unit-testing-example](https://github.com/MoOx/react-component-unit-testing-example)\n\nCet exemple contient les commandes et d√©pendances\n(d√©finies dans le `package.json`)\ndont vous aurez besoin.\n\n# Et comment tester les √©v√®nements comme `onClick` ?\n\nVous n'avez pas √† reproduire le clic compl√®tement.\n\n**Vos tests n'ont pas besoin de v√©rifier que la prop `onClick` va bien √™tre\nex√©cut√©e lorsque vous cliquerez sur un √©l√©ment du DOM.**\n_React couvre probablement cela dans sa suite de tests._\n\nCe que vous avez besoin de tester, c'est que la valeur que vous passez au\n`onClick` fait bien ce que vous voulez.\nEn gros, si vous avez un bout de code qui ressemble √†\n`onClick={ yourCallback }`, vous n'avez tout simplement qu'√† appeler directement\n`yourCallback()` dans vos tests juste avant votre comparaison.\nC'est bien assez !\n\nSi vous voulez aller un peu plus loin, vous pouvez continuer par lire¬†:\n- [_Unit testing React components without a DOM_](http://simonsmith.io/unit-testing-react-components-without-a-dom/),\npar Simon Smith, qui couvre le m√™me sujet, sans la simplicit√© de la comparaison\nJSX,\n- [_How we unit test React components using expect-jsx_](https://blog.algolia.com/how-we-unit-test-react-components-using-expect-jsx/)\nsur le blog d'Algolia, qui explique pourquoi ils ont choisi et cr√©√© les outils\npour cette approche.\n\nAvec ces exemples, nous esp√©rons vraiment que vous n'aurez plus peur de tester\nvotre code et que vous n'h√©siterez plus √† couvrir tous vos composants React de\ntests üòç.\n","__filename":"fr/articles/js/react/test-unitaires.md","__url":"/fr/articles/js/react/test-unitaires/","__resourceUrl":"/fr/articles/js/react/test-unitaires/index.html","__dataUrl":"/fr/articles/js/react/test-unitaires/index.html.8daa39910831198369dc3b1df5df1562.json"}