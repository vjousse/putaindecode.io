{"head":{"layout":"Post","comments":true,"date":"2015-10-20","title":"Gérer son thème WordPress avec Webpack","tags":["wordpress","webpack","javascript","task-runner"],"authors":["MoOx"],"header":{"credit":"https://www.flickr.com/photos/4everyoung/2505890793/","linearGradient":"160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)"},"description":"Pourquoi Webpack pour gérer son thème WordPress ?\n\nLa réponse est la même qu'à la simple question\n\"pourquoi Webpack ?\".\nL'intérêt principal…"},"body":"<h1 id=\"pourquoi-webpack-pour-grer-son-thme-wordpress-\"><a href=\"#pourquoi-webpack-pour-grer-son-thme-wordpress-\" class=\"phenomic-HeadingAnchor\">#</a>Pourquoi Webpack pour gérer son thème WordPress ?</h1>\n<p>La réponse est la même qu&#x27;à la simple question\n<a href=\"/fr/articles/js/webpack/\">&quot;pourquoi Webpack ?&quot;</a>.\nL&#x27;intérêt principal est d&#x27;obtenir des rapports d&#x27;erreurs liés à\nla gestion des assets (images, fonts, etc).</p>\n<p>Qu&#x27;y a-t-il de si particulier à savoir pour utiliser Webpack pour gérer un thème\nWordPress ? Pas grand chose, mais voici de quoi vous faire gagner (peut-être)\nun peu de temps.</p>\n<p>Il y a certainement plusieurs façons de gérer son thème WordPress\navec Webpack. Celle que je vous propose va se limiter à des choses\nsimples en concentrant le code dans le répertoire du thème pour plus de\nmodularité.</p>\n<p>Pour commencer, deux choses importantes à savoir :</p>\n<ul>\n<li>Ne mettez pas de CSS dans le fameux <code>style.css</code> à la racine de votre thème,\nlaissez juste le cartouche en commentaire (sans lequel WordPress ne détectera\npas votre thème...) ;</li>\n<li>créez un dossier <code>src</code> dans votre thème, où nous\nmettrons nos &quot;sources&quot;, la partie du thème &quot;compilé&quot; sera dans un dossier\n<code>dist</code> et n&#x27;aura donc pas besoin d&#x27;être versionnée.</li>\n</ul>\n<p>La seule petite chose à laquelle il faut faire attention finalement, c&#x27;est de\nbien configurer le <code>publicPath</code> de Webpack afin que les fichiers qu&#x27;il génère\nsoient bien dans le bon chemin, et que les ressources liées (dans les fichiers CSS\npar exemple) comportent les bons chemins relatifs (à la racine du site).</p>\n<p>Avec l&#x27;arborescence suivante, nous n&#x27;aurons pas de difficulté à faire une\nconfiguration portable :</p>\n<pre><code>- htdocs\n  - wp-content\n    - themes\n      - putaindetheme\n        - node_modules\n        - src\n          - index.js\n          - index.css\n          - images/*\n          - fonts/*\n        - style.css\n        - webpack.config.babel.json\n        - package.json\n- package.json\n</code></pre>\n<p>En plus de cela, nous pouvons ajouter une sorte de raccourci via un\n<code>package.json</code> supplémentaire à la racine de notre projet :</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"private\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"cd htdocs/wp-content/themes/putaindetheme &amp;&amp; npm start\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"cd htdocs/wp-content/themes/putaindetheme &amp;&amp; npm run build\"</span>\n  }\n}</code></pre>\n<p>Ce petit raccourci nous évitera de devoir nous taper en CLI tout le chemin du\nthème et nous pourrions même, pourquoi pas, rajouter un\n<code>&quot;prestart&quot;: &quot;open http://yourlocalhost.tld&quot;</code> afin d&#x27;ouvrir automatiquement\nle projet dans le navigateur lorsque nous démarrerons notre développement via\n<code>$ npm start</code>.</p>\n<p>Voyons rapidement donc le <code>package.json</code> du thème ainsi que la config Webpack.</p>\n<p><code>package.json</code></p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"private\"</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"webpack --config=webpack.config.babel.js --watch\"</span>,\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"webpack --config=webpack.config.babel.js -p\"</span>\n  },\n  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n    <span class=\"hljs-attr\">\"babel\"</span>: <span class=\"hljs-string\">\"^5.8.12\"</span>,\n    <span class=\"hljs-attr\">\"babel-core\"</span>: <span class=\"hljs-string\">\"^5.8.12\"</span>,\n    <span class=\"hljs-attr\">\"babel-loader\"</span>: <span class=\"hljs-string\">\"^5.3.2\"</span>,\n    <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^0.15.6\"</span>,\n    <span class=\"hljs-attr\">\"eslint\"</span>: <span class=\"hljs-string\">\"^0.24.1\"</span>,\n    <span class=\"hljs-attr\">\"eslint-loader\"</span>: <span class=\"hljs-string\">\"^0.14.2\"</span>,\n    <span class=\"hljs-attr\">\"extract-text-webpack-plugin\"</span>: <span class=\"hljs-string\">\"^0.8.2\"</span>,\n    <span class=\"hljs-attr\">\"file-loader\"</span>: <span class=\"hljs-string\">\"^0.8.4\"</span>,\n    <span class=\"hljs-attr\">\"json-loader\"</span>: <span class=\"hljs-string\">\"^0.5.2\"</span>,\n    <span class=\"hljs-attr\">\"postcss-cssnext\"</span>: <span class=\"hljs-string\">\"^2.1.0\"</span>,\n    <span class=\"hljs-attr\">\"postcss-import\"</span>: <span class=\"hljs-string\">\"^7.0.0\"</span>,\n    <span class=\"hljs-attr\">\"postcss-loader\"</span>: <span class=\"hljs-string\">\"^0.6.0\"</span>,\n    <span class=\"hljs-attr\">\"postcss-url\"</span>: <span class=\"hljs-string\">\"^5.0.2\"</span>,\n    <span class=\"hljs-attr\">\"style-loader\"</span>: <span class=\"hljs-string\">\"^0.12.3\"</span>,\n    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^1.10.5\"</span>\n  },\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"normalize.css\"</span>: <span class=\"hljs-string\">\"^3.0.3\"</span>\n  }\n}</code></pre>\n<p>Quelques petites notes sur ce contenu :</p>\n<ul>\n<li><code>private</code> sert à éviter la publication de votre &quot;paquet&quot; sur npm, ainsi qu&#x27;à\ndevoir remplir certains champs tels que <code>name</code> et compagnie ;</li>\n<li>nous mettrons dans <code>devDependencies</code> les dépendances pour le développement et\ndans <code>dependencies</code> les dépendances qui seront dans le build final. Ici, j&#x27;ai\nsimplement mis <code>normalize.css</code> pour exemple, mais vous pourriez très bien avoir\naussi jQuery (:trollface:) ou React ;</li>\n<li>les scripts utilisent <code>webpack.config.babel.js</code> afin de pouvoir définir la\nconfiguration en es6/7 via <em>babel</em>.</li>\n</ul>\n<p>Voyons maintenant la config <code>webpack.config.babel.js</code> :</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// Note: le code ci-dessous est mal rendu</span>\n<span class=\"hljs-comment\">// Une issue est ouverte à ce propos</span>\n<span class=\"hljs-comment\">// https://github.com/isagalaev/highlight.js/issues/958</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"babel/polyfill\"</span>\n<span class=\"hljs-keyword\">import</span> path <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"path\"</span>\n<span class=\"hljs-keyword\">import</span> ExtractTextPlugin <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"extract-text-webpack-plugin\"</span>\n<span class=\"hljs-keyword\">import</span> postcssImport <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"postcss-import\"</span>\n<span class=\"hljs-keyword\">import</span> postcssUrl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"postcss-url\"</span>\n<span class=\"hljs-keyword\">import</span> postcssCssnext <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"postcss-cssnext\"</span>\n\n<span class=\"hljs-keyword\">const</span> production = process.argv.includes(<span class=\"hljs-string\">`-p`</span>)\n\n<span class=\"hljs-keyword\">const</span> theme = path.basename(__dirname)\n<span class=\"hljs-keyword\">const</span> src = path.join(__dirname, <span class=\"hljs-string\">`src`</span>)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  entry: {\n    index: [<span class=\"hljs-string\">`<span class=\"hljs-subst\">${ src }</span>/index.js`</span>],\n  },\n\n  output: {\n    path: path.join(__dirname, <span class=\"hljs-string\">`dist`</span>),\n    filename: <span class=\"hljs-string\">`[name].js`</span>,\n    publicPath: <span class=\"hljs-string\">`wp-content/themes/<span class=\"hljs-subst\">${ theme }</span>/dist/`</span>,\n  },\n  resolve: {\n    extensions: [\n      <span class=\"hljs-string\">``</span>,\n      <span class=\"hljs-string\">`.js`</span>,\n      <span class=\"hljs-string\">`.json`</span>,\n    ],\n  },\n\n  <span class=\"hljs-built_in\">module</span>: {\n    loaders: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.json$/</span>,\n        loader: <span class=\"hljs-string\">`json-loader`</span>,\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.js$/</span>,\n        loaders: [\n          <span class=\"hljs-string\">`babel-loader`</span>,\n          <span class=\"hljs-string\">`eslint-loader`</span>,\n        ],\n        include: src,\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        loader: ExtractTextPlugin.extract(\n          <span class=\"hljs-string\">`style-loader`</span>,\n          [\n            <span class=\"hljs-string\">`css-loader`</span>,\n            <span class=\"hljs-string\">`postcss-loader`</span>,\n          ].join(<span class=\"hljs-string\">`!`</span>)\n        ),\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.(ico|jpe?g|png|gif)$/</span>,\n        loader: <span class=\"hljs-string\">`file-loader?name=[path][name].[ext]&amp;context=<span class=\"hljs-subst\">${ src }</span>/`</span>,\n      },\n    ],\n  },\n\n  plugins: [\n    <span class=\"hljs-keyword\">new</span> ExtractTextPlugin(<span class=\"hljs-string\">`[name].css`</span>, {disable: !production}),\n  ],\n\n  postcss: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// https://github.com/postcss/postcss-loader/issues/31</span>\n    <span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-keyword\">this</span>\n\n    <span class=\"hljs-keyword\">return</span> [\n      postcssImport({\n        onImport: (files) =&gt; files.forEach(webpack.addDependency),\n      }),\n      postcssUrl(),\n      postcssCssnext({\n        browsers: <span class=\"hljs-string\">`last 2 versions`</span>,\n      }),\n    ]\n  },\n}</code></pre>\n<p><em>Bien entendu, libre à vous d&#x27;adapter les loaders Webpack à utiliser, ainsi que\nla configuration PostCSS par exemple.</em> Faites un tour sur notre article de\n<a href=\"/fr/articles/js/webpack/premier-exemple/\">premier exemple de configuration Webpack</a> afin\nd&#x27;y voir plus clair.</p>\n<p>Il nous reste maintenant à ajouter dans notre thème WordPress les\nréférences à nos points d&#x27;entrées CSS et JavaScript que sont <code>index.css</code> et\n<code>index.js</code>.</p>\n<p>Pour faire simplement, dans votre fichier <code>functions.php</code> (oui, le fichier qui a un nom\nqui n&#x27;indique pas du tout ce pour quoi tout le monde se sert du fichier, c&#x27;est à\ndire la configuration du thème au runtime...), on va ajouter une petite constante\nqui servira à adapter votre thème en fonction de l&#x27;environnement :</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-comment\">// ENV est à définir dans votre configuration Apache par exemple.</span>\n<span class=\"hljs-comment\">// Si vous ne voulez pas y toucher, vous pouvez plutôt définir d'une autre façon</span>\n<span class=\"hljs-comment\">// en testant le SERVER_NAME par exemple</span>\ndefine(<span class=\"hljs-string\">'ENV'</span>, getenv(<span class=\"hljs-string\">'ENV'</span>));\n\n<span class=\"hljs-comment\">// en local, on pourrait définir ENV à \"development\"</span></code></pre>\n<p><em>Nous pourrions dans ce fichier utiliser l&#x27;API de Wordpress pour enregister nos\n<code>index.css</code> et <code>index.js</code> via les méthodes <code>wp_(de)register_</code>, mais nous\nresterons simples pour l&#x27;exemple.</em></p>\n<p>Vu qu&#x27;on utilise le <code>style-loader</code> de Webpack en développement, on ne va ajouter\nnotre feuille de style qu&#x27;en production (dans le <code>&lt;head&gt;</code>).</p>\n<pre><code class=\"hljs language-php\"><span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">if</span> (ENV != <span class=\"hljs-string\">\"development\"</span>): <span class=\"hljs-meta\">?&gt;</span>\n  &lt;link rel=<span class=\"hljs-string\">\"stylesheet\"</span> href=<span class=\"hljs-string\">\"&lt;?php echo get_bloginfo('template_directory') ?&gt;/dist/index.css\"</span> /&gt;\n<span class=\"hljs-meta\">&lt;?php</span> <span class=\"hljs-keyword\">endif</span>; <span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>Pensez aussi à supprimer la référence à <code>style.css</code> dans <code>header.php</code>.</p>\n<p>Dans la même idée mais en plus simple, on va ajouter dans notre <code>footer.php</code>.</p>\n<pre><code class=\"hljs language-php\">&lt;script src=<span class=\"hljs-string\">\"&lt;?php echo get_bloginfo('template_directory') ?&gt;/dist/index.js\"</span>&gt;&lt;/script&gt;</code></pre>\n<p>Rien de bien compliqué finalement.</p>\n<p><em>Attention si votre thème hérite d&#x27;un autre,\n<code>get_bloginfo(&#x27;template_directory&#x27;)</code> ne pointera pas vers votre thème mais le\nthème parent. Il vous faudra donc ajuster le code 😑.</em></p>\n<hr>\n<p>Pour le test vous pouvez mettre dans les CSS et JS :</p>\n<p><code>index.css</code></p>\n<pre><code class=\"hljs language-css\">@<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"normalize.css\"</span>;\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background</span>: red;\n}</code></pre>\n<p>Notez ici que par la façon dont nous avons défini Webpack ci-dessus, vous\ndevriez placer et référencer vos assets (images &amp; co), depuis <code>src</code>. Exemple :</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-tag\">html</span> {\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">url</span>(./images/background.jpg)\n  <span class=\"hljs-comment\">/* =&gt; wp-content/themes/putaindetheme/src/images/background.jpg */</span>\n}</code></pre>\n<p>Ensuite, dans <code>index.js</code>, je vous laisse vous débrouiller :)</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hey !\"</span>)</code></pre>\n<p>Libre à vous maintenant d&#x27;ajouter vos dépendances favorites et de remplir vos\n<code>index.css</code> et <code>index.js</code> avec une gestion d&#x27;erreurs autre que des requêtes HTTP\nen 404 !</p>\n","rawBody":"\n# Pourquoi Webpack pour gérer son thème WordPress ?\n\nLa réponse est la même qu'à la simple question\n[\"pourquoi Webpack ?\"](/fr/articles/js/webpack/).\nL'intérêt principal est d'obtenir des rapports d'erreurs liés à\nla gestion des assets (images, fonts, etc).\n\nQu'y a-t-il de si particulier à savoir pour utiliser Webpack pour gérer un thème\nWordPress ? Pas grand chose, mais voici de quoi vous faire gagner (peut-être)\nun peu de temps.\n\nIl y a certainement plusieurs façons de gérer son thème WordPress\navec Webpack. Celle que je vous propose va se limiter à des choses\nsimples en concentrant le code dans le répertoire du thème pour plus de\nmodularité.\n\nPour commencer, deux choses importantes à savoir :\n\n- Ne mettez pas de CSS dans le fameux `style.css` à la racine de votre thème,\nlaissez juste le cartouche en commentaire (sans lequel WordPress ne détectera\npas votre thème...) ;\n- créez un dossier `src` dans votre thème, où nous\nmettrons nos \"sources\", la partie du thème \"compilé\" sera dans un dossier\n`dist` et n'aura donc pas besoin d'être versionnée.\n\nLa seule petite chose à laquelle il faut faire attention finalement, c'est de\nbien configurer le `publicPath` de Webpack afin que les fichiers qu'il génère\nsoient bien dans le bon chemin, et que les ressources liées (dans les fichiers CSS\npar exemple) comportent les bons chemins relatifs (à la racine du site).\n\nAvec l'arborescence suivante, nous n'aurons pas de difficulté à faire une\nconfiguration portable :\n\n```\n- htdocs\n  - wp-content\n    - themes\n      - putaindetheme\n        - node_modules\n        - src\n          - index.js\n          - index.css\n          - images/*\n          - fonts/*\n        - style.css\n        - webpack.config.babel.json\n        - package.json\n- package.json\n```\n\nEn plus de cela, nous pouvons ajouter une sorte de raccourci via un\n`package.json` supplémentaire à la racine de notre projet :\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"cd htdocs/wp-content/themes/putaindetheme && npm start\",\n    \"build\": \"cd htdocs/wp-content/themes/putaindetheme && npm run build\"\n  }\n}\n```\n\nCe petit raccourci nous évitera de devoir nous taper en CLI tout le chemin du\nthème et nous pourrions même, pourquoi pas, rajouter un\n`\"prestart\": \"open http://yourlocalhost.tld\"` afin d'ouvrir automatiquement\nle projet dans le navigateur lorsque nous démarrerons notre développement via\n`$ npm start`.\n\nVoyons rapidement donc le `package.json` du thème ainsi que la config Webpack.\n\n`package.json`\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"webpack --config=webpack.config.babel.js --watch\",\n    \"build\": \"webpack --config=webpack.config.babel.js -p\"\n  },\n  \"devDependencies\": {\n    \"babel\": \"^5.8.12\",\n    \"babel-core\": \"^5.8.12\",\n    \"babel-loader\": \"^5.3.2\",\n    \"css-loader\": \"^0.15.6\",\n    \"eslint\": \"^0.24.1\",\n    \"eslint-loader\": \"^0.14.2\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"file-loader\": \"^0.8.4\",\n    \"json-loader\": \"^0.5.2\",\n    \"postcss-cssnext\": \"^2.1.0\",\n    \"postcss-import\": \"^7.0.0\",\n    \"postcss-loader\": \"^0.6.0\",\n    \"postcss-url\": \"^5.0.2\",\n    \"style-loader\": \"^0.12.3\",\n    \"webpack\": \"^1.10.5\"\n  },\n  \"dependencies\": {\n    \"normalize.css\": \"^3.0.3\"\n  }\n}\n```\n\nQuelques petites notes sur ce contenu :\n\n- `private` sert à éviter la publication de votre \"paquet\" sur npm, ainsi qu'à\ndevoir remplir certains champs tels que `name` et compagnie ;\n- nous mettrons dans `devDependencies` les dépendances pour le développement et\ndans `dependencies` les dépendances qui seront dans le build final. Ici, j'ai\nsimplement mis `normalize.css` pour exemple, mais vous pourriez très bien avoir\naussi jQuery (:trollface:) ou React ;\n- les scripts utilisent `webpack.config.babel.js` afin de pouvoir définir la\nconfiguration en es6/7 via _babel_.\n\nVoyons maintenant la config `webpack.config.babel.js` :\n\n\n```js\n// Note: le code ci-dessous est mal rendu\n// Une issue est ouverte à ce propos\n// https://github.com/isagalaev/highlight.js/issues/958\n\nimport \"babel/polyfill\"\nimport path from \"path\"\nimport ExtractTextPlugin from \"extract-text-webpack-plugin\"\nimport postcssImport from \"postcss-import\"\nimport postcssUrl from \"postcss-url\"\nimport postcssCssnext from \"postcss-cssnext\"\n\nconst production = process.argv.includes(`-p`)\n\nconst theme = path.basename(__dirname)\nconst src = path.join(__dirname, `src`)\n\nexport default {\n  entry: {\n    index: [`${ src }/index.js`],\n  },\n\n  output: {\n    path: path.join(__dirname, `dist`),\n    filename: `[name].js`,\n    publicPath: `wp-content/themes/${ theme }/dist/`,\n  },\n  resolve: {\n    extensions: [\n      ``,\n      `.js`,\n      `.json`,\n    ],\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: `json-loader`,\n      },\n      {\n        test: /\\.js$/,\n        loaders: [\n          `babel-loader`,\n          `eslint-loader`,\n        ],\n        include: src,\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          `style-loader`,\n          [\n            `css-loader`,\n            `postcss-loader`,\n          ].join(`!`)\n        ),\n      },\n      {\n        test: /\\.(ico|jpe?g|png|gif)$/,\n        loader: `file-loader?name=[path][name].[ext]&context=${ src }/`,\n      },\n    ],\n  },\n\n  plugins: [\n    new ExtractTextPlugin(`[name].css`, {disable: !production}),\n  ],\n\n  postcss: function() {\n    // https://github.com/postcss/postcss-loader/issues/31\n    const webpack = this\n\n    return [\n      postcssImport({\n        onImport: (files) => files.forEach(webpack.addDependency),\n      }),\n      postcssUrl(),\n      postcssCssnext({\n        browsers: `last 2 versions`,\n      }),\n    ]\n  },\n}\n```\n\n_Bien entendu, libre à vous d'adapter les loaders Webpack à utiliser, ainsi que\nla configuration PostCSS par exemple._ Faites un tour sur notre article de\n[premier exemple de configuration Webpack](/fr/articles/js/webpack/premier-exemple/) afin\nd'y voir plus clair.\n\nIl nous reste maintenant à ajouter dans notre thème WordPress les\nréférences à nos points d'entrées CSS et JavaScript que sont `index.css` et\n`index.js`.\n\nPour faire simplement, dans votre fichier `functions.php` (oui, le fichier qui a un nom\nqui n'indique pas du tout ce pour quoi tout le monde se sert du fichier, c'est à\ndire la configuration du thème au runtime...), on va ajouter une petite constante\nqui servira à adapter votre thème en fonction de l'environnement :\n\n```php\n// ENV est à définir dans votre configuration Apache par exemple.\n// Si vous ne voulez pas y toucher, vous pouvez plutôt définir d'une autre façon\n// en testant le SERVER_NAME par exemple\ndefine('ENV', getenv('ENV'));\n\n// en local, on pourrait définir ENV à \"development\"\n```\n\n*Nous pourrions dans ce fichier utiliser l'API de Wordpress pour enregister nos\n`index.css` et `index.js` via les méthodes `wp_(de)register_`, mais nous\nresterons simples pour l'exemple.*\n\nVu qu'on utilise le `style-loader` de Webpack en développement, on ne va ajouter\nnotre feuille de style qu'en production (dans le `<head>`).\n\n```php\n<?php if (ENV != \"development\"): ?>\n  <link rel=\"stylesheet\" href=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.css\" />\n<?php endif; ?>\n```\n\nPensez aussi à supprimer la référence à `style.css` dans `header.php`.\n\nDans la même idée mais en plus simple, on va ajouter dans notre `footer.php`.\n\n```php\n<script src=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.js\"></script>\n```\n\nRien de bien compliqué finalement.\n\n*Attention si votre thème hérite d'un autre,\n`get_bloginfo('template_directory')` ne pointera pas vers votre thème mais le\nthème parent. Il vous faudra donc ajuster le code 😑.*\n\n---\n\nPour le test vous pouvez mettre dans les CSS et JS :\n\n`index.css`\n\n```css\n@import \"normalize.css\";\nbody {\n  background: red;\n}\n```\n\nNotez ici que par la façon dont nous avons défini Webpack ci-dessus, vous\ndevriez placer et référencer vos assets (images & co), depuis `src`. Exemple :\n\n```css\nhtml {\n  background: url(./images/background.jpg)\n  /* => wp-content/themes/putaindetheme/src/images/background.jpg */\n}\n```\n\n\nEnsuite, dans `index.js`, je vous laisse vous débrouiller :)\n\n```js\nconsole.log(\"Hey !\")\n```\n\nLibre à vous maintenant d'ajouter vos dépendances favorites et de remplir vos\n`index.css` et `index.js` avec une gestion d'erreurs autre que des requêtes HTTP\nen 404 !\n","raw":"---\ndate: \"2015-10-20\"\ntitle: Gérer son thème WordPress avec Webpack\ntags:\n  - wordpress\n  - webpack\n  - javascript\n  - task-runner\nauthors:\n  - MoOx\nheader:\n  credit: https://www.flickr.com/photos/4everyoung/2505890793/\n  linearGradient: 160deg, rgb(204, 51, 51), rgba(204, 51, 51, .6)\n---\n\n# Pourquoi Webpack pour gérer son thème WordPress ?\n\nLa réponse est la même qu'à la simple question\n[\"pourquoi Webpack ?\"](/fr/articles/js/webpack/).\nL'intérêt principal est d'obtenir des rapports d'erreurs liés à\nla gestion des assets (images, fonts, etc).\n\nQu'y a-t-il de si particulier à savoir pour utiliser Webpack pour gérer un thème\nWordPress ? Pas grand chose, mais voici de quoi vous faire gagner (peut-être)\nun peu de temps.\n\nIl y a certainement plusieurs façons de gérer son thème WordPress\navec Webpack. Celle que je vous propose va se limiter à des choses\nsimples en concentrant le code dans le répertoire du thème pour plus de\nmodularité.\n\nPour commencer, deux choses importantes à savoir :\n\n- Ne mettez pas de CSS dans le fameux `style.css` à la racine de votre thème,\nlaissez juste le cartouche en commentaire (sans lequel WordPress ne détectera\npas votre thème...) ;\n- créez un dossier `src` dans votre thème, où nous\nmettrons nos \"sources\", la partie du thème \"compilé\" sera dans un dossier\n`dist` et n'aura donc pas besoin d'être versionnée.\n\nLa seule petite chose à laquelle il faut faire attention finalement, c'est de\nbien configurer le `publicPath` de Webpack afin que les fichiers qu'il génère\nsoient bien dans le bon chemin, et que les ressources liées (dans les fichiers CSS\npar exemple) comportent les bons chemins relatifs (à la racine du site).\n\nAvec l'arborescence suivante, nous n'aurons pas de difficulté à faire une\nconfiguration portable :\n\n```\n- htdocs\n  - wp-content\n    - themes\n      - putaindetheme\n        - node_modules\n        - src\n          - index.js\n          - index.css\n          - images/*\n          - fonts/*\n        - style.css\n        - webpack.config.babel.json\n        - package.json\n- package.json\n```\n\nEn plus de cela, nous pouvons ajouter une sorte de raccourci via un\n`package.json` supplémentaire à la racine de notre projet :\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"cd htdocs/wp-content/themes/putaindetheme && npm start\",\n    \"build\": \"cd htdocs/wp-content/themes/putaindetheme && npm run build\"\n  }\n}\n```\n\nCe petit raccourci nous évitera de devoir nous taper en CLI tout le chemin du\nthème et nous pourrions même, pourquoi pas, rajouter un\n`\"prestart\": \"open http://yourlocalhost.tld\"` afin d'ouvrir automatiquement\nle projet dans le navigateur lorsque nous démarrerons notre développement via\n`$ npm start`.\n\nVoyons rapidement donc le `package.json` du thème ainsi que la config Webpack.\n\n`package.json`\n\n```json\n{\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"webpack --config=webpack.config.babel.js --watch\",\n    \"build\": \"webpack --config=webpack.config.babel.js -p\"\n  },\n  \"devDependencies\": {\n    \"babel\": \"^5.8.12\",\n    \"babel-core\": \"^5.8.12\",\n    \"babel-loader\": \"^5.3.2\",\n    \"css-loader\": \"^0.15.6\",\n    \"eslint\": \"^0.24.1\",\n    \"eslint-loader\": \"^0.14.2\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"file-loader\": \"^0.8.4\",\n    \"json-loader\": \"^0.5.2\",\n    \"postcss-cssnext\": \"^2.1.0\",\n    \"postcss-import\": \"^7.0.0\",\n    \"postcss-loader\": \"^0.6.0\",\n    \"postcss-url\": \"^5.0.2\",\n    \"style-loader\": \"^0.12.3\",\n    \"webpack\": \"^1.10.5\"\n  },\n  \"dependencies\": {\n    \"normalize.css\": \"^3.0.3\"\n  }\n}\n```\n\nQuelques petites notes sur ce contenu :\n\n- `private` sert à éviter la publication de votre \"paquet\" sur npm, ainsi qu'à\ndevoir remplir certains champs tels que `name` et compagnie ;\n- nous mettrons dans `devDependencies` les dépendances pour le développement et\ndans `dependencies` les dépendances qui seront dans le build final. Ici, j'ai\nsimplement mis `normalize.css` pour exemple, mais vous pourriez très bien avoir\naussi jQuery (:trollface:) ou React ;\n- les scripts utilisent `webpack.config.babel.js` afin de pouvoir définir la\nconfiguration en es6/7 via _babel_.\n\nVoyons maintenant la config `webpack.config.babel.js` :\n\n\n```js\n// Note: le code ci-dessous est mal rendu\n// Une issue est ouverte à ce propos\n// https://github.com/isagalaev/highlight.js/issues/958\n\nimport \"babel/polyfill\"\nimport path from \"path\"\nimport ExtractTextPlugin from \"extract-text-webpack-plugin\"\nimport postcssImport from \"postcss-import\"\nimport postcssUrl from \"postcss-url\"\nimport postcssCssnext from \"postcss-cssnext\"\n\nconst production = process.argv.includes(`-p`)\n\nconst theme = path.basename(__dirname)\nconst src = path.join(__dirname, `src`)\n\nexport default {\n  entry: {\n    index: [`${ src }/index.js`],\n  },\n\n  output: {\n    path: path.join(__dirname, `dist`),\n    filename: `[name].js`,\n    publicPath: `wp-content/themes/${ theme }/dist/`,\n  },\n  resolve: {\n    extensions: [\n      ``,\n      `.js`,\n      `.json`,\n    ],\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.json$/,\n        loader: `json-loader`,\n      },\n      {\n        test: /\\.js$/,\n        loaders: [\n          `babel-loader`,\n          `eslint-loader`,\n        ],\n        include: src,\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          `style-loader`,\n          [\n            `css-loader`,\n            `postcss-loader`,\n          ].join(`!`)\n        ),\n      },\n      {\n        test: /\\.(ico|jpe?g|png|gif)$/,\n        loader: `file-loader?name=[path][name].[ext]&context=${ src }/`,\n      },\n    ],\n  },\n\n  plugins: [\n    new ExtractTextPlugin(`[name].css`, {disable: !production}),\n  ],\n\n  postcss: function() {\n    // https://github.com/postcss/postcss-loader/issues/31\n    const webpack = this\n\n    return [\n      postcssImport({\n        onImport: (files) => files.forEach(webpack.addDependency),\n      }),\n      postcssUrl(),\n      postcssCssnext({\n        browsers: `last 2 versions`,\n      }),\n    ]\n  },\n}\n```\n\n_Bien entendu, libre à vous d'adapter les loaders Webpack à utiliser, ainsi que\nla configuration PostCSS par exemple._ Faites un tour sur notre article de\n[premier exemple de configuration Webpack](/fr/articles/js/webpack/premier-exemple/) afin\nd'y voir plus clair.\n\nIl nous reste maintenant à ajouter dans notre thème WordPress les\nréférences à nos points d'entrées CSS et JavaScript que sont `index.css` et\n`index.js`.\n\nPour faire simplement, dans votre fichier `functions.php` (oui, le fichier qui a un nom\nqui n'indique pas du tout ce pour quoi tout le monde se sert du fichier, c'est à\ndire la configuration du thème au runtime...), on va ajouter une petite constante\nqui servira à adapter votre thème en fonction de l'environnement :\n\n```php\n// ENV est à définir dans votre configuration Apache par exemple.\n// Si vous ne voulez pas y toucher, vous pouvez plutôt définir d'une autre façon\n// en testant le SERVER_NAME par exemple\ndefine('ENV', getenv('ENV'));\n\n// en local, on pourrait définir ENV à \"development\"\n```\n\n*Nous pourrions dans ce fichier utiliser l'API de Wordpress pour enregister nos\n`index.css` et `index.js` via les méthodes `wp_(de)register_`, mais nous\nresterons simples pour l'exemple.*\n\nVu qu'on utilise le `style-loader` de Webpack en développement, on ne va ajouter\nnotre feuille de style qu'en production (dans le `<head>`).\n\n```php\n<?php if (ENV != \"development\"): ?>\n  <link rel=\"stylesheet\" href=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.css\" />\n<?php endif; ?>\n```\n\nPensez aussi à supprimer la référence à `style.css` dans `header.php`.\n\nDans la même idée mais en plus simple, on va ajouter dans notre `footer.php`.\n\n```php\n<script src=\"<?php echo get_bloginfo('template_directory') ?>/dist/index.js\"></script>\n```\n\nRien de bien compliqué finalement.\n\n*Attention si votre thème hérite d'un autre,\n`get_bloginfo('template_directory')` ne pointera pas vers votre thème mais le\nthème parent. Il vous faudra donc ajuster le code 😑.*\n\n---\n\nPour le test vous pouvez mettre dans les CSS et JS :\n\n`index.css`\n\n```css\n@import \"normalize.css\";\nbody {\n  background: red;\n}\n```\n\nNotez ici que par la façon dont nous avons défini Webpack ci-dessus, vous\ndevriez placer et référencer vos assets (images & co), depuis `src`. Exemple :\n\n```css\nhtml {\n  background: url(./images/background.jpg)\n  /* => wp-content/themes/putaindetheme/src/images/background.jpg */\n}\n```\n\n\nEnsuite, dans `index.js`, je vous laisse vous débrouiller :)\n\n```js\nconsole.log(\"Hey !\")\n```\n\nLibre à vous maintenant d'ajouter vos dépendances favorites et de remplir vos\n`index.css` et `index.js` avec une gestion d'erreurs autre que des requêtes HTTP\nen 404 !\n","__filename":"fr/articles/wordpress/webpack/index.md","__url":"/fr/articles/wordpress/webpack/","__resourceUrl":"/fr/articles/wordpress/webpack/index.html","__dataUrl":"/fr/articles/wordpress/webpack/index.html.d6cfe1a949a76f5cf97134ddae362786.json"}